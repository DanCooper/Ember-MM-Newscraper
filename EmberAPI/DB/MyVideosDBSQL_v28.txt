CREATE TABLE actors (
        idActor INTEGER PRIMARY KEY AUTOINCREMENT,
        strActor text NOT NULL,
        strThumb text,
		strIMDB text,
		strTMDB text
        );

        CREATE TRIGGER delete_person
        AFTER DELETE
        ON actors
        BEGIN
        DELETE FROM art WHERE media_id=old.idActor AND media_type IN ('actor','artist','writer','director');
        END;

CREATE TABLE actorlinkepisode (
        idActor integer,
        idEpisode integer,
        strRole text,
        iOrder integer
        );
        
        CREATE UNIQUE INDEX ix_actorlinkepisode_1
        ON actorlinkepisode
        (idActor, idEpisode);

        CREATE UNIQUE INDEX ix_actorlinkepisode_2
        ON actorlinkepisode
        (idEpisode, idActor);

CREATE TABLE actorlinkmovie (
        idActor integer,
        idMovie integer,
        strRole text,
        iOrder integer
        );

        CREATE UNIQUE INDEX ix_actorlinkmovie_1
        ON actorlinkmovie
        (idActor, idMovie);

        CREATE UNIQUE INDEX ix_actorlinkmovie_2
        ON actorlinkmovie
        (idMovie, idActor);

CREATE TABLE actorlinktvshow (
        idActor integer,
        idShow integer,
        strRole text,
        iOrder integer
        );

        CREATE UNIQUE INDEX ix_actorlinktvshow_1
        ON actorlinktvshow
        (idActor, idShow);

        CREATE UNIQUE INDEX ix_actorlinktvshow_2
        ON actorlinktvshow
        (idShow, idActor);

CREATE TABLE art (
		art_id		integer PRIMARY KEY,
		media_id	integer,
		media_type	text,
		type		text,
		url			text
		);

		CREATE INDEX ix_art
		ON art
		(media_id, media_type, type);

CREATE TABLE country (
        idCountry   integer PRIMARY KEY,
        strCountry  text
        );

CREATE TABLE countrylinkmovie (
        idCountry  integer,
        idMovie    integer
        );

        CREATE UNIQUE INDEX ix_countrylinkmovie_1
        ON countrylinkmovie
        (idCountry, idMovie);

        CREATE UNIQUE INDEX ix_countrylinkmovie_2
        ON countrylinkmovie
        (idMovie, idCountry);

CREATE TABLE directorlinkepisode (
        idDirector  integer,
        idEpisode   integer
        );

        CREATE UNIQUE INDEX ix_directorlinkepisode_1
        ON directorlinkepisode
        (idDirector, idEpisode);

        CREATE UNIQUE INDEX ix_directorlinkepisode_2
        ON directorlinkepisode
        (idEpisode, idDirector);

CREATE TABLE directorlinkmovie (
        idDirector  integer,
        idMovie     integer
        );

        CREATE UNIQUE INDEX ix_directorlinkmovie_1
        ON directorlinkmovie
        (idDirector, idMovie);

        CREATE UNIQUE INDEX ix_directorlinkmovie_2
        ON directorlinkmovie
        (idMovie, idDirector);

CREATE TABLE directorlinktvshow (
        idDirector  integer,
        idShow      integer
        );

        CREATE UNIQUE INDEX ix_directorlinktvshow_1
        ON directorlinktvshow
        (idDirector, idShow);

        CREATE UNIQUE INDEX ix_directorlinktvshow_2
        ON directorlinktvshow
        (idShow, idDirector);

CREATE TABLE episode (
        idEpisode       integer PRIMARY KEY AUTOINCREMENT,
        idShow          integer NOT NULL,
        idFile          integer NOT NULL,
        Episode         integer,
        Title           text,
        "New"           bool DEFAULT 0,
        Mark            bool NOT NULL DEFAULT 0,
        Source          text NOT NULL,
        Lock            bool NOT NULL DEFAULT 0,
        Season          integer,
        Rating          text,
        Plot            text,
        Aired           text,
        Director        text,
        Credits         text,
        NfoPath         text,
        Playcount       text,
        DisplaySeason   integer,
        DisplayEpisode  integer,
        DateAdded       integer,
        Runtime         text,
        Votes           text,
        VideoSource     text,
        HasSub          bool NOT NULL DEFAULT 0,
        SubEpisode		integer,
		iLastPlayed     integer,
		strIMDB         text,
		strTMDB         text,
		strTVDB         text
        );

        CREATE TRIGGER delete_episode
        AFTER DELETE
        ON episode
        BEGIN
        DELETE FROM actorlinkepisode WHERE idEpisode=old.idEpisode;
        DELETE FROM art WHERE media_id=old.idEpisode AND media_type='episode';
        DELETE FROM directorlinkepisode WHERE idEpisode=old.idEpisode;
        DELETE FROM files WHERE idFile=old.idFile;
        DELETE FROM writerlinkepisode WHERE idEpisode=old.idEpisode;
        DELETE FROM TVVStreams WHERE TVEpID=old.idEpisode;
        DELETE FROM TVAStreams WHERE TVEpID=old.idEpisode;
        DELETE FROM TVSubs WHERE TVEpID=old.idEpisode;
        END;

CREATE TABLE files(
	idFile INTEGER PRIMARY KEY AUTOINCREMENT,
	strFilename TEXT NOT NULL
	);
CREATE UNIQUE INDEX UniqueFilename ON files (strFilename);

CREATE TABLE genre (
        idGenre   integer PRIMARY KEY,
        strGenre  text
        );

CREATE TABLE genrelinkmovie (
        idGenre  integer,
        idMovie  integer
        );

        CREATE UNIQUE INDEX ix_genrelinkmovie_1
        ON genrelinkmovie
        (idGenre, idMovie);

        CREATE UNIQUE INDEX ix_genrelinkmovie_2
        ON genrelinkmovie
        (idMovie, idGenre);

CREATE TABLE genrelinktvshow (
        idGenre  integer,
        idShow   integer
        );

        CREATE UNIQUE INDEX ix_genrelinktvshow_1
        ON genrelinktvshow
        (idGenre, idShow);

        CREATE UNIQUE INDEX ix_genrelinktvshow_2
        ON genrelinktvshow
        (idShow, idGenre);

CREATE TABLE tag (
        idTag   integer PRIMARY KEY,
        strTag  text
        );

        CREATE UNIQUE INDEX ix_tag_1
        ON tag
        (strTag);

CREATE TABLE taglinks (
        idTag       integer,
        idMedia     integer,
        media_type  text
        );

        CREATE UNIQUE INDEX ix_taglinks_1
        ON taglinks
        (idTag, media_type, idMedia);

        CREATE UNIQUE INDEX ix_taglinks_2
        ON taglinks
        (idMedia, media_type, idTag);

        CREATE INDEX ix_taglinks_3
        ON taglinks
        (media_type);

        CREATE TRIGGER delete_tag
        AFTER DELETE
        ON taglinks
        BEGIN DELETE FROM tag WHERE idTag=old.idTag AND idTag NOT IN (SELECT DISTINCT idTag FROM taglinks);
		END;

CREATE TABLE movie (
        idMovie         integer PRIMARY KEY AUTOINCREMENT,
        MoviePath       text,
        Type            bool,
        ListTitle       text,
        HasSub          bool NOT NULL DEFAULT 0,
        "New"           bool NOT NULL DEFAULT 0,
        Mark            bool NOT NULL DEFAULT 0,
        Source          text,
        Imdb            text,
        Lock            bool,
        Title           text,
        OriginalTitle   text,
        Year            text,
        Rating          text,
        Votes           text,
        MPAA            text,
        Top250          text,
        Country         text,
        Outline         text,
        Plot            text,
        Tagline         text,
        Certification   text,
        Genre           text,
        Studio          text,
        Runtime         text,
        ReleaseDate     text,
        Director        text,
        Credits         text,
        Playcount       text,
        Trailer         text,
        EThumbsPath     text,
        NfoPath         text,
        TrailerPath     text,
        SubPath         text,
        FanartURL       text,
        UseFolder       bool,
        OutOfTolerance  bool,
        VideoSource     text,
        SortTitle       text,
        DateAdded       integer,
        EFanartsPath    text,
        ThemePath       text,
        TMDB            text,
        TMDBColID       text,
        DateModified    integer,
        MarkCustom1     bool NOT NULL DEFAULT 0,
        MarkCustom2     bool NOT NULL DEFAULT 0,
        MarkCustom3     bool NOT NULL DEFAULT 0,
        MarkCustom4     bool NOT NULL DEFAULT 0,
        HasSet          bool NOT NULL DEFAULT 0,
		iLastPlayed     integer
        );

        CREATE TRIGGER delete_movie
        AFTER DELETE
        ON movie
        BEGIN
        DELETE FROM actorlinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM art WHERE media_id=old.idMovie AND media_type='movie';
        DELETE FROM countrylinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM directorlinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM genrelinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM movielinktvshow WHERE idMovie=old.idMovie;
        DELETE FROM studiolinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM taglinks WHERE idMedia=old.idMovie AND media_type='movie';
        DELETE FROM writerlinkmovie WHERE idMovie=old.idMovie;
        DELETE FROM MoviesAStreams WHERE MovieID=old.idMovie;
        DELETE FROM MoviesSets WHERE MovieID=old.idMovie;
        DELETE FROM MoviesSubs WHERE MovieID=old.idMovie;
        DELETE FROM MoviesVStreams WHERE MovieID=old.idMovie;
        END;

CREATE TABLE movielinktvshow (
        idMovie  integer,
        idShow   integer
        );

        CREATE UNIQUE INDEX ix_movielinktvshow_1
        ON movielinktvshow
        (idShow, idMovie);

        CREATE UNIQUE INDEX ix_movielinktvshow_2
        ON movielinktvshow
        (idMovie, idShow);

CREATE TABLE seasons (
        idSeason       integer PRIMARY KEY,
        idShow         integer,
        Season         integer,
        SeasonText     text,
        Lock           bool NOT NULL DEFAULT 0,
        Mark           bool NOT NULL DEFAULT 0,
        "New"          bool NOT NULL DEFAULT 0,
		strTVDB        text,
		strTMDB        text,
		strAired       text,
		strPlot        text
        );

        CREATE UNIQUE INDEX ix_seasons
        ON seasons
        (idShow, season);
				
        CREATE TRIGGER delete_season
        AFTER DELETE
        ON seasons
        BEGIN
        DELETE FROM art WHERE media_id=old.idSeason AND media_type='season';
        DELETE FROM episode WHERE Season=old.Season AND idShow=old.idShow;
        END;

CREATE TABLE sets (
        idSet          integer PRIMARY KEY AUTOINCREMENT,
        ListTitle      text NOT NULL,
        NfoPath        text,
        TMDBColID      text,
        Plot           text,
        SetName        text,
        "New"          bool NOT NULL DEFAULT 0,
        Mark           bool NOT NULL DEFAULT 0,
        Lock           bool NOT NULL DEFAULT 0,
		SortMethod     integer NOT NULL DEFAULT 0
        );

        CREATE TRIGGER delete_set
        AFTER DELETE
        ON sets
        BEGIN
        DELETE FROM art WHERE media_id=old.idSet AND media_type='set';
        END;

CREATE TABLE studio (
        idStudio   integer PRIMARY KEY,
        strStudio  text
        );

        CREATE TABLE studiolinkmovie (
        idStudio  integer,
        idMovie   integer
        );

        CREATE UNIQUE INDEX ix_studiolinkmovie_1
        ON studiolinkmovie
        (idStudio, idMovie);

        CREATE UNIQUE INDEX ix_studiolinkmovie_2
        ON studiolinkmovie
        (idMovie, idStudio);

CREATE TABLE studiolinktvshow (
        idStudio  integer,
        idShow    integer
        );

        CREATE UNIQUE INDEX ix_studiolinktvshow_1
        ON studiolinktvshow
        (idStudio, idShow);

        CREATE UNIQUE INDEX ix_studiolinktvshow_2
        ON studiolinktvshow
        (idShow, idStudio);

CREATE TABLE tvshow (
		idShow            integer PRIMARY KEY AUTOINCREMENT,
        ListTitle         text,
        "New"             bool DEFAULT 0,
        Mark              bool NOT NULL DEFAULT 0,
        TVShowPath        text NOT NULL,
        Source            text NOT NULL,
        TVDB              text,
        Lock              bool NOT NULL DEFAULT 0,
        EpisodeGuide      text,
        Plot              text,
        Genre             text,
        Premiered         text,
        Studio            text,
        MPAA              text,
        Rating            text,
        NfoPath           text,
        Language          text,
        Ordering          integer NOT NULL DEFAULT 0,
        Status            text,
        ThemePath         text,
        EFanartsPath      text,
        Runtime           text,
        Title             text,
        Votes             text,
        EpisodeSorting    integer NOT NULL DEFAULT 0,
        SortTitle         text,
		strIMDB           text,
		strTMDB           text
        );

        CREATE UNIQUE INDEX UniqueTVShowPath
        ON tvshow
        (TVShowPath);

		CREATE TRIGGER delete_tvshow
        AFTER DELETE
        ON tvshow
        BEGIN
        DELETE FROM actorlinktvshow WHERE idShow=old.idShow;
        DELETE FROM art WHERE media_id=old.idShow AND media_type='tvshow';
        DELETE FROM directorlinktvshow WHERE idShow=old.idShow;
        DELETE FROM genrelinktvshow WHERE idShow=old.idShow;
        DELETE FROM movielinktvshow WHERE idShow=old.idShow;
        DELETE FROM seasons WHERE idShow=old.idShow;
        DELETE FROM studiolinktvshow WHERE idShow=old.idShow;
        DELETE FROM taglinks WHERE idMedia=old.idShow AND media_type='tvshow';
        END;

CREATE TABLE writerlinkepisode (
        idWriter   integer,
        idEpisode  integer
        );

        CREATE UNIQUE INDEX ix_writerlinkepisode_1
        ON writerlinkepisode
        (idWriter, idEpisode);

        CREATE UNIQUE INDEX ix_writerlinkepisode_2
        ON writerlinkepisode
        (idEpisode, idWriter);
        
CREATE TABLE writerlinkmovie (
        idWriter  integer,
        idMovie   integer
        );

        CREATE UNIQUE INDEX ix_writerlinkmovie_1
        ON writerlinkmovie
        (idWriter, idMovie);

        CREATE UNIQUE INDEX ix_writerlinkmovie_2
        ON writerlinkmovie
        (idMovie, idWriter);

CREATE TABLE MoviesSets(
	MovieID INTEGER NOT NULL,
	SetID INTEGER NOT NULL,
	SetOrder TEXT NOT NULL,
	PRIMARY KEY (MovieID,SetID)
	);

CREATE TABLE MoviesVStreams(
	MovieID INTEGER NOT NULL,
	StreamID INTEGER NOT NULL,
	Video_Width TEXT,
	Video_Height TEXT,
	Video_Codec TEXT,
	Video_Duration TEXT,
	Video_ScanType TEXT,
	Video_AspectDisplayRatio TEXT,
	Video_Language TEXT,
	Video_LongLanguage TEXT,
    Video_Bitrate TEXT,
	Video_MultiViewCount TEXT,
	Video_MultiViewLayout TEXT,
	Video_StereoMode TEXT,
	Video_FileSize INTEGER NOT NULL DEFAULT 0,
	PRIMARY KEY (MovieID,StreamID)
	);

CREATE TABLE MoviesAStreams(
	MovieID INTEGER NOT NULL,
	StreamID INTEGER NOT NULL,
	Audio_Language TEXT,
	Audio_LongLanguage TEXT,
	Audio_Codec TEXT,
	Audio_Channel TEXT,
	Audio_Bitrate TEXT,
	PRIMARY KEY (MovieID,StreamID)
	);

CREATE TABLE MoviesSubs(
	MovieID INTEGER NOT NULL,
	StreamID INTEGER NOT NULL,
	Subs_Language TEXT,
	Subs_LongLanguage TEXT,
	Subs_Type TEXT,
	Subs_Path TEXT,
	Subs_Forced BOOL NOT NULL DEFAULT 0,
	PRIMARY KEY (MovieID,StreamID)
	);

CREATE TABLE Sources(
	ID INTEGER PRIMARY KEY AUTOINCREMENT,
	Name TEXT NOT NULL,
	Path TEXT NOT NULL,
	Recursive BOOL NOT NULL DEFAULT 0,
	Foldername BOOL NOT NULL DEFAULT 0,
	Single BOOL NOT NULL DEFAULT 0,
	LastScan TEXT NOT NULL DEFAULT '1900/01/01',
	Exclude BOOL NOT NULL DEFAULT 0,
	GetYear BOOL NOT NULL DEFAULT 1
	);
CREATE UNIQUE INDEX UniqueSource ON Sources (Path);

CREATE TRIGGER delete_source
	AFTER DELETE
	ON Sources
BEGIN
	DELETE FROM movie WHERE Source=old.Name;
END;

CREATE TABLE TVVStreams(
	TVEpID INTEGER NOT NULL,
	StreamID INTEGER NOT NULL,
	Video_Width TEXT,
	Video_Height TEXT,
	Video_Codec TEXT,
	Video_Duration TEXT,
	Video_ScanType TEXT,
	Video_AspectDisplayRatio TEXT,
	Video_Language TEXT,
	Video_LongLanguage TEXT,
    Video_Bitrate TEXT,
	Video_MultiViewCount TEXT,
	Video_MultiViewLayout TEXT,
	Video_StereoMode TEXT,
	Video_FileSize INTEGER NOT NULL DEFAULT 0,
	PRIMARY KEY (TVEpID,StreamID)
	);

CREATE TABLE TVAStreams(
	TVEpID INTEGER NOT NULL,
	StreamID INTEGER NOT NULL,
	Audio_Language TEXT,
	Audio_LongLanguage TEXT,
	Audio_Codec TEXT,
	Audio_Channel TEXT,
	Audio_Bitrate TEXT,
	PRIMARY KEY (TVEpID,StreamID)
	);

CREATE TABLE TVSubs(
	TVEpID INTEGER NOT NULL,
	StreamID INTEGER NOT NULL,
	Subs_Language TEXT,
	Subs_LongLanguage TEXT,
	Subs_Type TEXT,
	Subs_Path TEXT,
	Subs_Forced BOOL NOT NULL DEFAULT 0,
	PRIMARY KEY (TVEpID,StreamID)
	);

CREATE TABLE TVSources(
	ID INTEGER PRIMARY KEY AUTOINCREMENT,
	Name TEXT NOT NULL,
	Path TEXT NOT NULL,
	LastScan TEXT NOT NULL DEFAULT '1900/01/01',
	Language TEXT NOT NULL DEFAULT en,
	Ordering INTEGER NOT NULL DEFAULT 0,
	Exclude BOOL NOT NULL DEFAULT 0,
	EpisodeSorting INTEGER NOT NULL DEFAULT 0
	);
CREATE UNIQUE INDEX UniqueTVSource ON TVSources (Path);

CREATE TRIGGER delete_tvsource
	AFTER DELETE
	ON TVSources
BEGIN
	DELETE FROM tvshow WHERE Source=old.Name;
END;

CREATE TABLE OrigPaths(
	OrigPath TEXT NOT NULL,
	EmberPath TEXT NOT NULL,
	Platform TEXT NOT NULL,
	Recursive BOOL NOT NULL DEFAULT 0,
	PRIMARY KEY (OrigPath,Platform)
	);

CREATE TABLE EmberFiles(
	OrigPath TEXT NOT NULL,
	EmberPath TEXT NOT NULL,
	Filename TEXT NOT NULL,
	Hash TEXT NOT NULL,
	Platform TEXT NOT NULL,
	UseFile BOOL NOT NULL DEFAULT 0,
	PRIMARY KEY (OrigPath,Filename)
	);

CREATE TABLE ExcludeFiles(
	Filename TEXT NOT NULL,
	PRIMARY KEY (Filename)
	);

CREATE TABLE ExcludeDir(
	Dirname TEXT NOT NULL,
	PRIMARY KEY (Dirname)
	);

CREATE TABLE ExcludeFilesInFolders(
	Filename TEXT NOT NULL,
	EmberPath TEXT NOT NULL,
	PRIMARY KEY (Filename,EmberPath)
	);

CREATE VIEW episodelist
        AS
        SELECT
        episode.*,
        fanart.url AS FanartPath,
        poster.url AS PosterPath,
        CASE WHEN episode.idFile IS -1 THEN 1 ELSE 0 END AS Missing
        FROM
        episode
        LEFT OUTER JOIN art AS fanart ON (fanart.media_id = episode.idEpisode)
        AND (fanart.media_type = 'episode')
        AND (fanart.type = 'fanart')
        LEFT OUTER JOIN art AS poster ON (poster.media_id = episode.idEpisode)
        AND (poster.media_type = 'episode')
        AND (poster.type = 'thumb');

CREATE VIEW movielist
        AS
        SELECT
        movie.*,
        CASE WHEN movie.SortTitle IS NOT '' THEN movie.SortTitle ELSE movie.ListTitle END AS SortedTitle,
        banner.url AS BannerPath,
        clearart.url AS ClearArtPath,
        clearlogo.url AS ClearLogoPath,
        discart.url AS DiscArtPath,
        fanart.url AS FanartPath,
        landscape.url AS LandscapePath,
        poster.url AS PosterPath
        FROM
        movie
        LEFT OUTER JOIN art AS banner ON (banner.media_id = movie.idMovie)
        AND (banner.media_type = 'movie')
        AND (banner.type = 'banner')
        LEFT OUTER JOIN art AS clearart ON (clearart.media_id = movie.idMovie)
        AND (clearart.media_type = 'movie')
        AND (clearart.type = 'clearart')
        LEFT OUTER JOIN art AS clearlogo ON (clearlogo.media_id = movie.idMovie)
        AND (clearlogo.media_type = 'movie')
        AND (clearlogo.type = 'clearlogo')
        LEFT OUTER JOIN art AS discart ON (discart.media_id = movie.idMovie)
        AND (discart.media_type = 'movie')
        AND (discart.type = 'discart')
        LEFT OUTER JOIN art AS fanart ON (fanart.media_id = movie.idMovie)
        AND (fanart.media_type = 'movie')
        AND (fanart.type = 'fanart')
        LEFT OUTER JOIN art AS landscape ON (landscape.media_id = movie.idMovie)
        AND (landscape.media_type = 'movie')
        AND (landscape.type = 'landscape')
        LEFT OUTER JOIN art AS poster ON (poster.media_id = movie.idMovie)
        AND (poster.media_type = 'movie')
        AND (poster.type = 'poster');

CREATE VIEW setslist
        AS
        SELECT
        sets.*,
        banner.url AS BannerPath,
        clearart.url AS ClearArtPath,
        clearlogo.url AS ClearLogoPath,
        discart.url AS DiscArtPath,
        fanart.url AS FanartPath,
        landscape.url AS LandscapePath,
        poster.url AS PosterPath,
        COUNT(MoviesSets.MovieID) AS 'Count'
        FROM
        sets
        LEFT OUTER JOIN art AS banner ON (banner.media_id = sets.idSet)
        AND (banner.media_type = 'set')
        AND (banner.type = 'banner')
        LEFT OUTER JOIN art AS clearart ON (clearart.media_id = sets.idSet)
        AND (clearart.media_type = 'set')
        AND (clearart.type = 'clearart')
        LEFT OUTER JOIN art AS clearlogo ON (clearlogo.media_id = sets.idSet)
        AND (clearlogo.media_type = 'set')
        AND (clearlogo.type = 'clearlogo')
        LEFT OUTER JOIN art AS discart ON (discart.media_id = sets.idSet)
        AND (discart.media_type = 'set')
        AND (discart.type = 'discart')
        LEFT OUTER JOIN art AS fanart ON (fanart.media_id = sets.idSet)
        AND (fanart.media_type = 'set')
        AND (fanart.type = 'fanart')
        LEFT OUTER JOIN art AS landscape ON (landscape.media_id = sets.idSet)
        AND (landscape.media_type = 'set')
        AND (landscape.type = 'landscape')
        LEFT OUTER JOIN art AS poster ON (poster.media_id = sets.idSet)
        AND (poster.media_type = 'set')
        AND (poster.type = 'poster')
        LEFT OUTER JOIN MoviesSets ON sets.idSet = MoviesSets.SetID
        GROUP BY sets.idSet;

CREATE VIEW seasonslist
        AS
        SELECT
        seasons.*,
        banner.url AS BannerPath,
        fanart.url AS FanartPath,
        landscape.url AS LandscapePath,
        poster.url AS PosterPath,
        CASE WHEN seasons.Season IS NOT 999 THEN COUNT(DISTINCT episodelist.idEpisode) ELSE NULL END AS Episodes,
        COUNT(episodelist.Playcount) AS Playcount,
        CASE WHEN seasons.Season IS NOT 999 THEN CASE WHEN COUNT(DISTINCT episodelist.idEpisode) IS NOT 0 AND COUNT(DISTINCT episodelist.idEpisode) = COUNT(episodelist.Playcount) THEN 1 ELSE 0 END ELSE NULL END AS HasWatched,
        SUM(episodelist.New) AS NewEpisodes,
        CASE WHEN COUNT(DISTINCT episodelist.idEpisode) IS NOT 0 THEN 0 ELSE 1 END AS Missing
        FROM
        seasons
        LEFT OUTER JOIN art AS banner ON (banner.media_id = seasons.idSeason)
        AND (banner.media_type = 'season')
        AND (banner.type = 'banner')
        LEFT OUTER JOIN art AS fanart ON (fanart.media_id = seasons.idSeason)
        AND (fanart.media_type = 'season')
        AND (fanart.type = 'fanart')
        LEFT OUTER JOIN art AS landscape ON (landscape.media_id = seasons.idSeason)
        AND (landscape.media_type = 'season')
        AND (landscape.type = 'landscape')
        LEFT OUTER JOIN art AS poster ON (poster.media_id = seasons.idSeason)
        AND (poster.media_type = 'season')
        AND (poster.type = 'poster')
        LEFT OUTER JOIN episodelist ON (seasons.Season = episodelist.Season)
        AND (seasons.idShow = episodelist.idShow)
        AND (episodelist.Missing = 0)
        GROUP BY
        seasons.idSeason;

CREATE VIEW tvshowlist
        AS
        SELECT
        tvshow.*,
        CASE WHEN tvshow.SortTitle IS NOT '' THEN tvshow.SortTitle ELSE tvshow.ListTitle END AS SortedTitle,
        banner.url AS BannerPath,
        characterart.url AS CharacterArtPath,
        clearart.url AS ClearArtPath,
        clearlogo.url AS ClearLogoPath,
        fanart.url AS FanartPath,
        landscape.url AS LandscapePath,
        poster.url AS PosterPath,
        COUNT(DISTINCT episodelist.idEpisode) AS Episodes,
        COUNT(episodelist.Playcount) AS Playcount,
        CASE WHEN COUNT(DISTINCT episodelist.idEpisode) IS NOT 0 AND COUNT(DISTINCT episodelist.idEpisode) = COUNT(episodelist.Playcount) THEN 1 ELSE 0 END AS HasWatched,
        SUM(episodelist.New) AS NewEpisodes
        FROM
        tvshow
        LEFT OUTER JOIN art AS banner ON (banner.media_id = tvshow.idShow)
        AND (banner.media_type = 'tvshow')
        AND (banner.type = 'banner')
        LEFT OUTER JOIN art AS characterart ON (characterart.media_id = tvshow.idShow)
        AND (characterart.media_type = 'tvshow')
        AND (characterart.type = 'characterart')
        LEFT OUTER JOIN art AS clearart ON (clearart.media_id = tvshow.idShow)
        AND (clearart.media_type = 'tvshow')
        AND (clearart.type = 'clearart')
        LEFT OUTER JOIN art AS clearlogo ON (clearlogo.media_id = tvshow.idShow)
        AND (clearlogo.media_type = 'tvshow')
        AND (clearlogo.type = 'clearlogo')
        LEFT OUTER JOIN art AS fanart ON (fanart.media_id = tvshow.idShow)
        AND (fanart.media_type = 'tvshow')
        AND (fanart.type = 'fanart')
        LEFT OUTER JOIN art AS landscape ON (landscape.media_id = tvshow.idShow)
        AND (landscape.media_type = 'tvshow')
        AND (landscape.type = 'landscape')
        LEFT OUTER JOIN art AS poster ON (poster.media_id = tvshow.idShow)
        AND (poster.media_type = 'tvshow')
        AND (poster.type = 'poster')
        LEFT OUTER JOIN episodelist ON (tvshow.idShow = episodelist.idShow)
        AND (episodelist.Missing = 0)
        GROUP BY
        tvshow.idShow;