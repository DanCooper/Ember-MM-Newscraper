<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Label2.Text" xml:space="preserve">
    <value>This is either your first time running Ember Media Manager or you have upgraded to a newer version.  There are a few things Ember Media Manager needs to know to work properly.  This wizard will walk you through configuring Ember Media Manager to work for your set up.

Only a handful of settings will be covered in this wizard. You can change these or any other setting at any time by selecting "Settings..." from the "Edit" menu.</value>
  </data>
  <data name="Label4.Text" xml:space="preserve">
    <value>Now that Ember Media Manager knows WHERE to look for the files, we need to tell it WHAT files to look for.  Simply select any combination of files type you wish Ember Media Manager to load from and save to.  You can select more than one from each section if you wish.</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnMovieRem.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6
        JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAAArpAAAK6QH9dc7TAAAB7UlE
        QVQ4T6WQQUgbQRSG18YWjbV4UNudicnMxiiahK4VAwaaFEqhUAoeeyoIXsSTd0WjHmzagHpRD1KFHnKr
        0UANWJMWiqBFaWOpFNSDePWol8Lzzeisu3vUw7fz3v+/98/uagBwKxzN0bPO1wcJc9yu2TlMmP2HySeD
        ds0q/r2IvdkzQ/C7ncHfeDRvHxLsJ8xUORqEcsSA/WRHBr7NVwhdmn9exr3bkSBscirZavXDr+7rkPJT
        M7UdNtAjkq02DruxcJcVUKj2VpQ4/VAK+kCCQ99b/PCzO5rdSXYM/QhzKKJm+QYtlpoe1VgBikLQl1kz
        KBSQNUZgHd9ko53DF6Zfapde8VMbr1Q7jgBBDkOWcVCCt37GINXnDPr1Y7j5rn3esazIGnQzi//CxelK
        l2ndrHA0gkVOR5cY+Y+Am0VOcu55RzPHaWoeBxVzVzg1moeTc2fAVCigTTMyOh0goJgSJ6OrM4ymZW2H
        kfxMs7/KCsi0MO+7gA4uisOPQ3eEn2YkM+ny05zGrADBpNHUO4bpY34d8Nw463kllxXjAfJeesgE980e
        P49LX/Nokjo8at/qDSMDtDFfU+kxsY+g3inAWvSsT29Y6KcPl7CuRx7IAPHAIQ8iv0mKmlaNfa0d1O7b
        /HuoeWStxJsB2gW8qh8AcaOVUQAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="btnMovieAddFolder.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6
        JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAAArpAAAK6QH9dc7TAAACrUlE
        QVQ4T6XOXUhTYRzH8YGUBBUKRXdNkwjMLpKKMKSLLrroBatJYhYVmqmVORUlS1vm61YqxXozIzOToAyn
        qV0sL8y1wve55nRO5zY3tzPnNNs5Z+PXs8EOyq6iA9/zPA88/w8PD8B/xW3c0zXRtPFxImOSCmjzM9Jz
        AT1XL6AtDb4S3eaXR1cPBvL/XMOF4axZynqsL+CZr4fH9goe+2t4qSZ4Hc3wOlv8/TZ/rJh1YH0QsDiQ
        G8kYHoKdfQDWWAPWVAfW/AieOSk8lqfwwd75J1ia64GdWjbabPMih4MK5QCHMotP68vB6O+TSsFMl5Eq
        wMxUgTWI/bDHWAmXqRtOlxsUZQdB9nKArTeVT0+WgJksAjNxi6x3wOiKwUzdJYn8KDt1G4sGGRYW/8Bu
        t80QZB0HWHtS+O7xAtAaIehfOWTNBT2eD2iLgAkCEZTV3oBT3wrKueIDCn1zHGD6cpa/MiaEezSTlAFa
        lQl27DqGRxLwc+Q4QbPgUpeDsllAORbc5Plb1gD6dgF/aTAbS/1XsNyfBnbgKpihTEiVEahWbMXycApW
        tC1wuLywWi3NgWEOGP9wir/w4xqcilRQfRehVSRBo0xG3bdoVPVGQaVMgGa0FHPkBabBt2VBgOrdSb6t
        NwPOnstQfT2NbHkE8uRRKJbvQgkpT74TWd2boNC9h1vdVh0EfG84FmmQp8PUdQHqzkRIOg74E7bHIFu2
        G+KOWEi649E1JIO6r6E2CBh6kxCm+ZzGjH06B01rMgxt5zEtS0F6UyySGmOg6zgDXZcIGlleo6XzxI41
        QAjP/20suLQvoTY/vkScc0gkuRlXKhHG3TtSvsd4uDLGJco9KC5I2V1A7kWRIshMJCmMewE5hKxWA/G2
        hW8O2789nDvzeBvIXV+hgZmgoX8LvL+LddNtLbmnwgAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="Label8.Text" xml:space="preserve">
    <value>Some options you may be interested in:

Custom Filters - If your movie files have things like "DVDRip", "BluRay", "x264", etc in their folder or file name and you wish to filter the names when loading into the media list, you can utilize the Custom Filter option.  The custom filter is RegEx compatible for maximum usability.

Images - This section allows you to select which websites to "scrape" images from as well as select a preferred size for the images Ember Media Manager selects.

Locks - This section allows you to "lock" certain information so it does not get updated even if you re-scrape the movie. This is useful if you manually edit the title, outline, or plot of a movie and wish to keep your changes.</value>
  </data>
  <data name="btnTVRemoveSource.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6
        JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAAArpAAAK6QH9dc7TAAAB7UlE
        QVQ4T6WQQUgbQRSG18YWjbV4UNudicnMxiiahK4VAwaaFEqhUAoeeyoIXsSTd0WjHmzagHpRD1KFHnKr
        0UANWJMWiqBFaWOpFNSDePWol8Lzzeisu3vUw7fz3v+/98/uagBwKxzN0bPO1wcJc9yu2TlMmP2HySeD
        ds0q/r2IvdkzQ/C7ncHfeDRvHxLsJ8xUORqEcsSA/WRHBr7NVwhdmn9exr3bkSBscirZavXDr+7rkPJT
        M7UdNtAjkq02DruxcJcVUKj2VpQ4/VAK+kCCQ99b/PCzO5rdSXYM/QhzKKJm+QYtlpoe1VgBikLQl1kz
        KBSQNUZgHd9ko53DF6Zfapde8VMbr1Q7jgBBDkOWcVCCt37GINXnDPr1Y7j5rn3esazIGnQzi//CxelK
        l2ndrHA0gkVOR5cY+Y+Am0VOcu55RzPHaWoeBxVzVzg1moeTc2fAVCigTTMyOh0goJgSJ6OrM4ymZW2H
        kfxMs7/KCsi0MO+7gA4uisOPQ3eEn2YkM+ny05zGrADBpNHUO4bpY34d8Nw463kllxXjAfJeesgE980e
        P49LX/Nokjo8at/qDSMDtDFfU+kxsY+g3inAWvSsT29Y6KcPl7CuRx7IAPHAIQ8iv0mKmlaNfa0d1O7b
        /HuoeWStxJsB2gW8qh8AcaOVUQAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="btnTVAddSource.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6
        JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAACXBIWXMAAArpAAAK6QH9dc7TAAACrUlE
        QVQ4T6XOXUhTYRzH8YGUBBUKRXdNkwjMLpKKMKSLLrroBatJYhYVmqmVORUlS1vm61YqxXozIzOToAyn
        qV0sL8y1wve55nRO5zY3tzPnNNs5Z+PXs8EOyq6iA9/zPA88/w8PD8B/xW3c0zXRtPFxImOSCmjzM9Jz
        AT1XL6AtDb4S3eaXR1cPBvL/XMOF4axZynqsL+CZr4fH9goe+2t4qSZ4Hc3wOlv8/TZ/rJh1YH0QsDiQ
        G8kYHoKdfQDWWAPWVAfW/AieOSk8lqfwwd75J1ia64GdWjbabPMih4MK5QCHMotP68vB6O+TSsFMl5Eq
        wMxUgTWI/bDHWAmXqRtOlxsUZQdB9nKArTeVT0+WgJksAjNxi6x3wOiKwUzdJYn8KDt1G4sGGRYW/8Bu
        t80QZB0HWHtS+O7xAtAaIehfOWTNBT2eD2iLgAkCEZTV3oBT3wrKueIDCn1zHGD6cpa/MiaEezSTlAFa
        lQl27DqGRxLwc+Q4QbPgUpeDsllAORbc5Plb1gD6dgF/aTAbS/1XsNyfBnbgKpihTEiVEahWbMXycApW
        tC1wuLywWi3NgWEOGP9wir/w4xqcilRQfRehVSRBo0xG3bdoVPVGQaVMgGa0FHPkBabBt2VBgOrdSb6t
        NwPOnstQfT2NbHkE8uRRKJbvQgkpT74TWd2boNC9h1vdVh0EfG84FmmQp8PUdQHqzkRIOg74E7bHIFu2
        G+KOWEi649E1JIO6r6E2CBh6kxCm+ZzGjH06B01rMgxt5zEtS0F6UyySGmOg6zgDXZcIGlleo6XzxI41
        QAjP/20suLQvoTY/vkScc0gkuRlXKhHG3TtSvsd4uDLGJco9KC5I2V1A7kWRIshMJCmMewE5hKxWA/G2
        hW8O2789nDvzeBvIXV+hgZmgoX8LvL+LddNtLbmnwgAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="Label11.Text" xml:space="preserve">
    <value>And finally, let's tell Ember Media Manager what TV Show files to look for.  Simply select any combination of files type you wish Ember Media Manager to load from and save to.  You can select more than one from each section if you wish.</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAA
        AAD///8A////AP///wD///8A////AOLi4muBgYHTZmdp3n1+f7bExMRa////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////ANra2ns4OTv/MjQ3/zs+Q/8zNjv/S1FZ/5yfo7b8/f0D////AP//
        /wD///8A////AP///wD///8A////AP///wBiY2PzNDY5/5mir//P3vb/qrvU/zg+Rv9JT1j/xNDZo///
        /wD///8A////AP///wD///8A////AP///wD8/PwaPD5B/zg7QP+Omqv/iJar/4CPpv9seIn/XGRv/2mC
        k+rY5/BP////AP///wD///8A////AP///wD///8A+/z9E0RGSvMvMjb/XWd3/2Nuf/9VXmr/NTk//zY5
        Pv9ZgJnngrbax////wD///8A////AP///wD///8A////AOfz/FdmbnTqR01W/11nd/+Sorn/f4qb/zQ4
        Pf8zNTj6Tqbh80mk4fr///8A////AP///wD///8A////AP///wDl8/xeqs7m+kZLUPpMU13/QkdN/zo+
        Q/8wMjX/XISg1xah/v9jvPm7////AP///wD///8A////AP///wD///8A8vn9MrDd/P+x1vDueYqW415n
        bdN3eHmj0tLSOkap9uNqvvq28Pj9F////wD///8A////AP///wD///8A////AP///wDB5f7CldP9/4XL
        +v92wfX/y+f5Y////wBVpvDP/P39A////wD///8A////AP///wD///8A////AP///wD///8A+fv9CqHX
        /a5Suf7/Q7L9/1K0+ON4xPiusNH0cv///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD8/f0DRLP+3i6p/e4HmPv/AY70/87l+Uf///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A/Pz9B8Lk/Ff///8AbrXymwB04/+qzfNe////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AI+364MSZ9T3vNPyT////wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wBwoOOuirHol/b4/Ar///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wDV4/Y6ytz0R+jv+iP///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A3ej3R////wD///8A////AP///wD///8A////AP//
        /wD///8A/H8AAPgfAADwDwAA8A8AAPAHAADwBwAA8AcAAPBPAADw3wAA+D8AAPw/AAD/PwAA/z8AAP8/
        AAD//wAA//8AAA==
</value>
  </data>
</root>